#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Configuration
const RESEARCH_DIR = path.join(__dirname, '..', 'docs', '2_notes', 'flows', 'research');
const README_PATH = path.join(RESEARCH_DIR, 'README.md');

// Parse command line arguments
const args = process.argv.slice(2);
if (args.length === 0) {
  console.error('Usage: node research-builder.js "research: topic; query;"');
  process.exit(1);
}

// Parse the research command
const parseResearchCommand = (input) => {
  const match = input.match(/^research:\s*([^;]+);\s*([^;]+);/i);
  if (!match) {
    throw new Error('Invalid research format. Use: research: topic; query;');
  }
  return {
    topic: match[1].trim(),
    query: match[2].trim()
  };
};

// Generate a slug from the topic
const slugify = (text) => {
  return text
    .toLowerCase()
    .replace(/[^\w\s-]/g, '')
    .replace(/\s+/g, '-')
    .replace(/--+/g, '-');
};

// Format date as YYYY-MM-DD
const formatDate = (date = new Date()) => {
  return date.toISOString().split('T')[0];
};

// Create a new research directory
const createResearchDir = (topic) => {
  const date = formatDate();
  const dirName = `${date}_${slugify(topic)}`;
  const dirPath = path.join(RESEARCH_DIR, dirName);
  
  if (fs.existsSync(dirPath)) {
    throw new Error(`Research directory already exists: ${dirPath}`);
  }
  
  fs.mkdirSync(dirPath, { recursive: true });
  return { dirName, dirPath };
};

// Create README for the research
const createResearchReadme = (dirPath, topic, query) => {
  const content = `# ${topic}

## Research Query
${query}

## Summary
*Auto-generated research on ${formatDate()}*

## Table of Contents
1. [Introduction](./chunk_01.md)
2. [Analysis](./chunk_02.md)
3. [Conclusion](./chunk_03.md)

---
*This research was automatically generated by the research builder script.*
`;
  
  fs.writeFileSync(path.join(dirPath, 'README.md'), content);
};

// Create initial chunk files
const createChunkFiles = (dirPath) => {
  const chunks = [
    { name: 'chunk_01.md', content: '# Introduction\n\n## Research Question\n\n## Background\n' },
    { name: 'chunk_02.md', content: '# Analysis\n\n## Key Findings\n\n## Supporting Evidence\n' },
    { name: 'chunk_03.md', content: '# Conclusion\n\n## Summary of Findings\n\n## Next Steps\n' }
  ];
  
  chunks.forEach(chunk => {
    fs.writeFileSync(path.join(dirPath, chunk.name), chunk.content);
  });
};

// Update the main README with the new research
const updateMainReadme = (dirName, topic) => {
  const readmeContent = fs.readFileSync(README_PATH, 'utf8');
  const entry = `- [${topic}](${dirName}/README.md)  
  *Research added on ${formatDate()}*`;
  
  // Find the insert point (after "Current Research Topics" section)
  const insertPoint = readmeContent.indexOf('## Current Research Topics') + 
                     '## Current Research Topics'.length + 2; // +2 for newlines
  
  const updatedContent = readmeContent.slice(0, insertPoint) + 
                       '\n' + entry + '\n' + 
                       readmeContent.slice(insertPoint);
  
  fs.writeFileSync(README_PATH, updatedContent);
};

// Main function
const main = () => {
  try {
    const { topic, query } = parseResearchCommand(args[0]);
    console.log(`Creating new research: ${topic}`);
    
    // Create directory structure
    const { dirName, dirPath } = createResearchDir(topic);
    
    // Generate files
    createResearchReadme(dirPath, topic, query);
    createChunkFiles(dirPath);
    
    // Update main README
    updateMainReadme(dirName, topic);
    
    console.log(`\n‚úÖ Research created successfully!`);
    console.log(`üìÅ Location: ${dirPath}`);
    console.log(`\nNext steps:`);
    console.log(`1. Edit the chunk files in ${dirName}/`);
    console.log(`2. Update the README with your research findings`);
    console.log(`3. Commit your changes to version control`);
    
  } catch (error) {
    console.error('\n‚ùå Error:', error.message);
    process.exit(1);
  }
};

// Run the script
main();
